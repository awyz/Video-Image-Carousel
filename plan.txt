CURRENT PROGRESS
* Fix timer when switching to videos
* Hide the old image slideshow
* Put in fading to new img?



:::global variables:::
imgDiv
videoDiv

// for switching/fading
tempImgDiv
tempVideoDiv

Q: Whats the difference between init and construct

Steps

line 102

Creation
* Create window with a div in it (set width & height)
* Enable controls
* Make background black
* set loadTimer for pictures & fade count

currently uses bigList to switch through images

idea
* put videos file name inside of bigList
* randomly choose something in big list
* if filename ends with .mp4, then show video layer and hide img layer
  * ignore loadTimer
  * put video on video layer and play
  * once it is done, hide the video layer
* if file is an image, show image layer and hide video layer
  * use loadTimer
  * show for loadTimer amt of seconds
  * once done, hide image layer
* randomly choose something in the big list again

problem:
* images and videos are in different directories
* can we just make the image path normal and video path ../videos

adding to carousel
* same eat function as image

 movie_player for findAllApplicationsOfType

 click on videos that dont play

 onended event video

 resize --> use this.sendResize!!!

 Q: What does initApp do?

 imageLoadCallback --> mediaLoadCallback


-------------


	performEat: function() {
	  let imageApps = this.findAllApplicationsOfType("image_viewer");
	  let imageUrl;
	  for (let i = 0; i < imageApps.length; i++) {
	      if (this.isParamAppOverThisApp(imageApps[i])) {
          console.log("IMAGE: " + imageApps);
	          imageUrl = this.getUrlOfApp(imageApps[i]);
	          while(imageUrl.includes("/")) {
	              imageUrl = imageUrl.substring(imageUrl.indexOf("/") + 1);
	          }
	          while(imageUrl.includes("\\")) {
	              imageUrl = imageUrl.substring(imageUrl.indexOf("/") + 1);
						}
	          if (!this.isAlreadyInBigList(imageUrl)) {
	            this.bigList.push({name: imageUrl});
	          }
	          imageApps[i].close();
	      }
	  }
		let videoApps = this.findAllApplicationsOfType("movie_player")
    // console.log("inside video portion");
		let videoUrl;
		for (let j = 0; j < videoApps.length; j++) {
			if (this.isParamAppOverThisApp(videoApps[j])) {
        console.log("VIDEO: " + videoApps);
        // error; loops forever and doesn't recognize movie_player as an
        // app type
					videoUrl = this.getUrlOfApp(videoApps[j]);

					while(videoUrl.includes("/")) {
							videoUrl = videoUrl.substring(videoUrl.indexOf("/") + 1);
					}
					while(videoUrl.includes("\\")) {
							videoUrl = videoUrl.substring(videoUrl.indexOf("/") + 1);
					}
					if (!this.isAlreadyInBigList(videoUrl)) {
						this.bigList.push({name: videoUrl});
					}

					console.log("video before close");
					videoApps[j].close();
					console.log("video after close");

			}
		}
	},


	isAlreadyInBigList: function(url) {
	  for(let i = 0; i < this.bigList.length; i++) {
	      if (this.bigList[i].name === url) {
	          return true;
	      }
	  }
	  return false;
	},




    findAllApplicationsOfType: function(type) {
    	let appsOfType = [];
    	// Applications is an object with id entries
    	let appIds = Object.keys(applications);
    	let app;
    	// Go through each entry
    	for (let i = 0; i < appIds.length; i++) {
    		app = applications[appIds[i]];
    		// If the application matches the type given
    		if (app.application === type) {
    			appsOfType.push(app);
    		}
    	}
    	// Return array of all matches
      if (appsOfType.length > 0) {
        console.log(appsOfType);
      }
    	return appsOfType;
    },


    isParamAppOverThisApp: function(app) {
    	let thisAppBounds = {
    		top: this.sage2_y,
    		left: this.sage2_x,
    		width: this.sage2_width,
    		height: this.sage2_height
    	};
    	let otherAppBounds = {
    		top: app.sage2_y,
    		left: app.sage2_x,
    		width: app.sage2_width,
    		height: app.sage2_height
    	};
    	// Top left is 0,0.
    	if ((thisAppBounds.top < otherAppBounds.top)
    		&& (thisAppBounds.left < otherAppBounds.left)
    		&& (thisAppBounds.width > otherAppBounds.width)
    		&& (thisAppBounds.height > otherAppBounds.height)
    		){
    			return true;
    	}
    	return false;
    },




    getUrlOfApp: function(app) {
    	// The different app types have different storage of url
    	if (app.application === "image_viewer") {
    		return app.state.img_url;
    	} else if (app.application === "movie_player") {
    		return app.state.video_url;
    	} else {
    		throw "App type " + app.application + " unsuported. Unable to determine URL.";
    	}
    },
